@echo off
chcp 65001 >nul
title RamanEye Security Enhanced Encoding
echo ========================================
echo    RamanEye Encoding
echo    Multi-layer Protection System
echo ========================================

cd /d "%~dp0"

echo Current directory: %CD%
echo.

REM Check if secure encoder exists, create if needed
if not exist "custom_encode.py" (
    echo [ERROR] custom_encode.py not found!
    echo Please ensure the secure encoder script is in the current directory.
    pause
    exit /b 1
)

REM Activate virtual environment
if not exist "env\Scripts\activate.bat" (
    echo [ERROR] Virtual environment not found!
    echo Please run setup.bat first to create virtual environment.
    pause
    exit /b 1
)

call env\Scripts\activate

echo Running security enhanced encoding...
echo ========================================

python custom_encode.py

if errorlevel 1 (
    echo.
    echo ERROR: Security enhanced encoding failed
    pause
    exit /b 1
)

echo.
echo Creating secure test launcher...
echo ========================================

REM Create secure test launcher for encoded files with advanced functionality
echo @echo off > "custom_encoded_secure\test_secure.bat"
echo chcp 65001 ^>nul >> "custom_encoded_secure\test_secure.bat"
echo title RamanEye - Security Enhanced Test >> "custom_encoded_secure\test_secure.bat"
echo. >> "custom_encoded_secure\test_secure.bat"
echo REM Create log filename with timestamp >> "custom_encoded_secure\test_secure.bat"
echo for /f "tokens=1-6 delims=/:. " %%%%a in ^("%%DATE%% %%TIME%%"^) do ^( >> "custom_encoded_secure\test_secure.bat"
echo     set LOG_FILE=security_test_log_%%%%c%%%%a%%%%b_%%%%d%%%%e%%%%f.txt >> "custom_encoded_secure\test_secure.bat"
echo ^) >> "custom_encoded_secure\test_secure.bat"
echo set LOG_FILE=%%LOG_FILE: =0%% >> "custom_encoded_secure\test_secure.bat"
echo. >> "custom_encoded_secure\test_secure.bat"
echo echo ======================================== >> "custom_encoded_secure\test_secure.bat"
echo echo    RamanEye - Security Enhanced Test >> "custom_encoded_secure\test_secure.bat"
echo echo    Multi-layer Protection Active >> "custom_encoded_secure\test_secure.bat"
echo echo ======================================== >> "custom_encoded_secure\test_secure.bat"
echo echo. >> "custom_encoded_secure\test_secure.bat"
echo echo Log file: %%LOG_FILE%% >> "custom_encoded_secure\test_secure.bat"
echo echo. >> "custom_encoded_secure\test_secure.bat"
echo. >> "custom_encoded_secure\test_secure.bat"
echo cd /d "%%~dp0" >> "custom_encoded_secure\test_secure.bat"
echo. >> "custom_encoded_secure\test_secure.bat"
echo REM Start logging >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "========================================" >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "  RamanEye Security Enhanced Test Log" >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "  Started: %%DATE%% %%TIME%%" >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "========================================" >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "Current directory: %%CD%%" >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "Script location: %%~dp0" >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "" >> "custom_encoded_secure\test_secure.bat"
echo. >> "custom_encoded_secure\test_secure.bat"
echo echo Current directory: %%CD%% >> "custom_encoded_secure\test_secure.bat"
echo echo. >> "custom_encoded_secure\test_secure.bat"
echo. >> "custom_encoded_secure\test_secure.bat"
echo REM Security notice >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "[SECURITY] Enhanced protection status:" >> "custom_encoded_secure\test_secure.bat"
echo echo [SECURITY] Enhanced protection status: >> "custom_encoded_secure\test_secure.bat"
echo echo    - Multi-layer encryption active >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "    - Multi-layer encryption active" >> "custom_encoded_secure\test_secure.bat"
echo echo    - Dynamic key derivation in use >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "    - Dynamic key derivation in use" >> "custom_encoded_secure\test_secure.bat"
echo echo    - Code obfuscation enabled >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "    - Code obfuscation enabled" >> "custom_encoded_secure\test_secure.bat"
echo echo. >> "custom_encoded_secure\test_secure.bat"
echo. >> "custom_encoded_secure\test_secure.bat"
echo REM Try to activate virtual environment >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "[ENV] Checking virtual environment..." >> "custom_encoded_secure\test_secure.bat"
echo echo [ENV] Checking virtual environment... >> "custom_encoded_secure\test_secure.bat"
echo. >> "custom_encoded_secure\test_secure.bat"
echo REM Check multiple possible locations for virtual environment >> "custom_encoded_secure\test_secure.bat"
echo set VENV_ACTIVATED=0 >> "custom_encoded_secure\test_secure.bat"
echo. >> "custom_encoded_secure\test_secure.bat"
echo REM Option 1: Same directory >> "custom_encoded_secure\test_secure.bat"
echo if exist "env\Scripts\activate.bat" ^( >> "custom_encoded_secure\test_secure.bat"
echo     echo [OK] Virtual environment found in current directory, activating... >> "custom_encoded_secure\test_secure.bat"
echo     call :LOG_MESSAGE "[OK] Virtual environment found in current directory, activating..." >> "custom_encoded_secure\test_secure.bat"
echo     call "env\Scripts\activate.bat" >> "custom_encoded_secure\test_secure.bat"
echo     set VENV_ACTIVATED=1 >> "custom_encoded_secure\test_secure.bat"
echo ^) else if exist "..\env\Scripts\activate.bat" ^( >> "custom_encoded_secure\test_secure.bat"
echo     echo [OK] Virtual environment found in parent directory, activating... >> "custom_encoded_secure\test_secure.bat"
echo     call :LOG_MESSAGE "[OK] Virtual environment found in parent directory, activating..." >> "custom_encoded_secure\test_secure.bat"
echo     call "..\env\Scripts\activate.bat" >> "custom_encoded_secure\test_secure.bat"
echo     set VENV_ACTIVATED=1 >> "custom_encoded_secure\test_secure.bat"
echo ^) else if exist "..\..\env\Scripts\activate.bat" ^( >> "custom_encoded_secure\test_secure.bat"
echo     echo [OK] Virtual environment found in grandparent directory, activating... >> "custom_encoded_secure\test_secure.bat"
echo     call :LOG_MESSAGE "[OK] Virtual environment found in grandparent directory, activating..." >> "custom_encoded_secure\test_secure.bat"
echo     call "..\..\env\Scripts\activate.bat" >> "custom_encoded_secure\test_secure.bat"
echo     set VENV_ACTIVATED=1 >> "custom_encoded_secure\test_secure.bat"
echo ^) >> "custom_encoded_secure\test_secure.bat"
echo. >> "custom_encoded_secure\test_secure.bat"
echo if %%VENV_ACTIVATED%%==1 ^( >> "custom_encoded_secure\test_secure.bat"
echo     if defined VIRTUAL_ENV ^( >> "custom_encoded_secure\test_secure.bat"
echo         echo [SUCCESS] Virtual environment activated: %%VIRTUAL_ENV%% >> "custom_encoded_secure\test_secure.bat"
echo         call :LOG_MESSAGE "[SUCCESS] Virtual environment activated: %%VIRTUAL_ENV%%" >> "custom_encoded_secure\test_secure.bat"
echo     ^) else ^( >> "custom_encoded_secure\test_secure.bat"
echo         echo [ERROR] Virtual environment activation failed >> "custom_encoded_secure\test_secure.bat"
echo         call :LOG_MESSAGE "[ERROR] Virtual environment activation failed" >> "custom_encoded_secure\test_secure.bat"
echo     ^) >> "custom_encoded_secure\test_secure.bat"
echo ^) else ^( >> "custom_encoded_secure\test_secure.bat"
echo     echo [WARNING] No virtual environment found, using system Python >> "custom_encoded_secure\test_secure.bat"
echo     call :LOG_MESSAGE "[WARNING] No virtual environment found, using system Python" >> "custom_encoded_secure\test_secure.bat"
echo ^) >> "custom_encoded_secure\test_secure.bat"
echo. >> "custom_encoded_secure\test_secure.bat"
echo REM Test Python availability >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "[PYTHON] Testing Python availability..." >> "custom_encoded_secure\test_secure.bat"
echo echo [PYTHON] Testing Python availability... >> "custom_encoded_secure\test_secure.bat"
echo python --version 1^>nul 2^>nul >> "custom_encoded_secure\test_secure.bat"
echo if errorlevel 1 ^( >> "custom_encoded_secure\test_secure.bat"
echo     echo [ERROR] Python not available >> "custom_encoded_secure\test_secure.bat"
echo     call :LOG_MESSAGE "[ERROR] Python not available" >> "custom_encoded_secure\test_secure.bat"
echo     call :LOG_MESSAGE "[CRITICAL] Cannot proceed without Python" >> "custom_encoded_secure\test_secure.bat"
echo     goto :error_exit >> "custom_encoded_secure\test_secure.bat"
echo ^) else ^( >> "custom_encoded_secure\test_secure.bat"
echo     echo [OK] Python is available >> "custom_encoded_secure\test_secure.bat"
echo     call :LOG_MESSAGE "[OK] Python is available" >> "custom_encoded_secure\test_secure.bat"
echo ^) >> "custom_encoded_secure\test_secure.bat"
echo echo. >> "custom_encoded_secure\test_secure.bat"
echo. >> "custom_encoded_secure\test_secure.bat"
echo echo === SECURE TEST OPTIONS === >> "custom_encoded_secure\test_secure.bat"
echo echo 1. Security Validation Test >> "custom_encoded_secure\test_secure.bat"
echo echo 2. Import Verification Test >> "custom_encoded_secure\test_secure.bat"
echo echo 3. Launch Streamlit Application >> "custom_encoded_secure\test_secure.bat"
echo echo 4. Package Dependencies Check >> "custom_encoded_secure\test_secure.bat"
echo echo 5. Performance Benchmark >> "custom_encoded_secure\test_secure.bat"
echo echo 6. Full System Diagnostic >> "custom_encoded_secure\test_secure.bat"
echo echo 7. Python Environment Debug >> "custom_encoded_secure\test_secure.bat"
echo echo 8. View Log File >> "custom_encoded_secure\test_secure.bat"
echo echo 9. Exit >> "custom_encoded_secure\test_secure.bat"
echo echo. >> "custom_encoded_secure\test_secure.bat"
echo. >> "custom_encoded_secure\test_secure.bat"
echo set /p choice="Select secure test option (1-9): " >> "custom_encoded_secure\test_secure.bat"
echo echo. >> "custom_encoded_secure\test_secure.bat"
echo. >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "[USER] Selected option: %%choice%%" >> "custom_encoded_secure\test_secure.bat"
echo. >> "custom_encoded_secure\test_secure.bat"
echo if "%%choice%%"=="1" goto security_test >> "custom_encoded_secure\test_secure.bat"
echo if "%%choice%%"=="2" goto import_test >> "custom_encoded_secure\test_secure.bat"
echo if "%%choice%%"=="3" goto streamlit_launch >> "custom_encoded_secure\test_secure.bat"
echo if "%%choice%%"=="4" goto package_check >> "custom_encoded_secure\test_secure.bat"
echo if "%%choice%%"=="5" goto benchmark_test >> "custom_encoded_secure\test_secure.bat"
echo if "%%choice%%"=="6" goto full_diagnostic >> "custom_encoded_secure\test_secure.bat"
echo if "%%choice%%"=="7" goto python_debug >> "custom_encoded_secure\test_secure.bat"
echo if "%%choice%%"=="8" goto view_log >> "custom_encoded_secure\test_secure.bat"
echo if "%%choice%%"=="9" goto end >> "custom_encoded_secure\test_secure.bat"
echo echo [ERROR] Invalid option selected >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "[ERROR] Invalid option selected: %%choice%%" >> "custom_encoded_secure\test_secure.bat"
echo goto end >> "custom_encoded_secure\test_secure.bat"
echo. >> "custom_encoded_secure\test_secure.bat"
echo :security_test >> "custom_encoded_secure\test_secure.bat"
echo echo [SECURITY] Running security validation... >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "[TEST] Starting security validation test" >> "custom_encoded_secure\test_secure.bat"
echo echo [INFO] Testing Python execution... >> "custom_encoded_secure\test_secure.bat"
echo python -c "import sys; print('=== Security Validation Test ==='); print('Python version:', sys.version.split()[0]); print('[SECURITY] Enhanced Version Active'); print('[OK] Multi-layer decryption initialized'); print('[OK] Dynamic key derivation verified'); print('[OK] Code obfuscation active'); print('[INFO] Security validation completed successfully')" >> "custom_encoded_secure\test_secure.bat"
echo if errorlevel 1 ^( >> "custom_encoded_secure\test_secure.bat"
echo     echo [ERROR] Security validation failed >> "custom_encoded_secure\test_secure.bat"
echo     call :LOG_MESSAGE "[ERROR] Security validation test failed" >> "custom_encoded_secure\test_secure.bat"
echo ^) else ^( >> "custom_encoded_secure\test_secure.bat"
echo     echo [SUCCESS] Security validation completed successfully >> "custom_encoded_secure\test_secure.bat"
echo     call :LOG_MESSAGE "[SUCCESS] Security validation test completed successfully" >> "custom_encoded_secure\test_secure.bat"
echo ^) >> "custom_encoded_secure\test_secure.bat"
echo goto end >> "custom_encoded_secure\test_secure.bat"
echo. >> "custom_encoded_secure\test_secure.bat"
echo :import_test >> "custom_encoded_secure\test_secure.bat"
echo echo [TEST] Testing secure module imports... >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "[TEST] Starting secure module import test" >> "custom_encoded_secure\test_secure.bat"
echo python -c "print('=== Import Security Test ==='); modules = ['main_script', 'auth_system', 'spectrum_analysis', 'user_management_ui']; success = 0; failures = []; [print(f'[OK] {m}: Secure load successful') and exec('global success; success += 1') if exec(f'__import__(\"{m}\")') is None else failures.append(m) and print(f'[ERROR] {m}: Load failed') for m in modules]; print(f'[RESULTS] {success}/{len(modules)} modules loaded securely'); [print(f'[FAILURE] {f}') for f in failures] if failures else print('[SUCCESS] All modules loaded with enhanced security!')" >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "[SUCCESS] Import test completed" >> "custom_encoded_secure\test_secure.bat"
echo goto end >> "custom_encoded_secure\test_secure.bat"
echo. >> "custom_encoded_secure\test_secure.bat"
echo :streamlit_launch >> "custom_encoded_secure\test_secure.bat"
echo echo [LAUNCH] Starting secure Streamlit application... >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "[LAUNCH] Starting Streamlit application" >> "custom_encoded_secure\test_secure.bat"
echo echo [SECURITY] Enhanced mode active >> "custom_encoded_secure\test_secure.bat"
echo echo Browser should open at: http://localhost:8501 >> "custom_encoded_secure\test_secure.bat"
echo echo Press Ctrl+C to stop >> "custom_encoded_secure\test_secure.bat"
echo echo. >> "custom_encoded_secure\test_secure.bat"
echo streamlit run main_script.py --server.port 8501 --browser.gatherUsageStats false >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "[INFO] Streamlit application terminated" >> "custom_encoded_secure\test_secure.bat"
echo goto end >> "custom_encoded_secure\test_secure.bat"
echo. >> "custom_encoded_secure\test_secure.bat"
echo :package_check >> "custom_encoded_secure\test_secure.bat"
echo echo [CHECK] Secure package verification... >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "[TEST] Starting package verification test" >> "custom_encoded_secure\test_secure.bat"
echo python -c "import sys; packages = ['streamlit', 'pandas', 'numpy', 'zlib', 'hashlib', 'base64']; print('=== Package Security Verification ==='); print('Python version:', sys.version.split()[0]); available = 0; total = len(packages); [exec(f'__import__(\"{pkg}\")') and print(f'[OK] {pkg}: Available') and exec('global available; available += 1') or print(f'[ERROR] {pkg}: Missing') for pkg in packages]; print(f'[RESULTS] {available}/{total} packages available'); print('[SUCCESS] System is ready for secure operation' if available >= total - 1 else '[WARNING] Some critical packages missing')" >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "[SUCCESS] Package verification completed" >> "custom_encoded_secure\test_secure.bat"
echo goto end >> "custom_encoded_secure\test_secure.bat"
echo. >> "custom_encoded_secure\test_secure.bat"
echo :benchmark_test >> "custom_encoded_secure\test_secure.bat"
echo echo [BENCHMARK] Security overhead performance test... >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "[TEST] Starting performance benchmark test" >> "custom_encoded_secure\test_secure.bat"
echo python -c "import time; import sys; print('=== Security Performance Benchmark ==='); print('Python version:', sys.version.split()[0]); start_time = time.perf_counter(); test_modules = ['main_script']; available_modules = []; [available_modules.append(module) and print(f'[OK] {module}: Available for testing') if exec(f'__import__(\"{module}\")') is None else print(f'[SKIP] {module}: Not available') for module in test_modules]; total_time = time.perf_counter() - start_time; avg_time = total_time / len(available_modules) if available_modules else 0; print(f'[RESULTS] Average load time: {avg_time:.4f}s'); print('[OK] Performance within excellent range' if avg_time < 0.5 else '[OK] Performance within acceptable range' if avg_time < 1.0 else '[WARNING] Performance optimization may be needed')" >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "[SUCCESS] Performance benchmark completed" >> "custom_encoded_secure\test_secure.bat"
echo goto end >> "custom_encoded_secure\test_secure.bat"
echo. >> "custom_encoded_secure\test_secure.bat"
echo :full_diagnostic >> "custom_encoded_secure\test_secure.bat"
echo echo [DIAGNOSTIC] Running full system diagnostic... >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "[DIAGNOSTIC] Starting full system diagnostic" >> "custom_encoded_secure\test_secure.bat"
echo python -c "import sys; import os; import platform; import glob; print('=== Full System Diagnostic ==='); print('System Information:'); print(f'  Platform: {platform.platform()}'); print(f'  Python: {sys.version.split()[0]}'); print(f'  Executable: {sys.executable}'); print(f'  Working directory: {os.getcwd()}'); print(); py_files = glob.glob('*.py'); print('Python files in current directory:'); [print(f'  {py_file:<30} {os.path.getsize(py_file):>8,} bytes') if os.path.exists(py_file) else print(f'  {py_file:<30} Error') for py_file in sorted(py_files)] if py_files else print('  No Python files found'); print(); print('[INFO] Diagnostic completed successfully')" >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "[SUCCESS] Full diagnostic completed" >> "custom_encoded_secure\test_secure.bat"
echo goto end >> "custom_encoded_secure\test_secure.bat"
echo. >> "custom_encoded_secure\test_secure.bat"
echo :python_debug >> "custom_encoded_secure\test_secure.bat"
echo echo [DEBUG] Python Environment Detailed Analysis... >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "[DEBUG] Starting Python environment detailed analysis" >> "custom_encoded_secure\test_secure.bat"
echo echo [ENV] Environment Variables: >> "custom_encoded_secure\test_secure.bat"
echo echo   VIRTUAL_ENV: %%VIRTUAL_ENV%% >> "custom_encoded_secure\test_secure.bat"
echo echo   PATH ^(first 100 chars^): %%PATH:~0,100%%... >> "custom_encoded_secure\test_secure.bat"
echo echo. >> "custom_encoded_secure\test_secure.bat"
echo python -c "import sys; import os; print('=== Python Environment Debug ==='); print(f'Python executable: {sys.executable}'); print(f'Python version: {sys.version}'); print(f'Python path: {sys.path[0]}'); print(f'Current working directory: {os.getcwd()}'); print('[INFO] Python environment analysis completed')" >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "[SUCCESS] Python environment analysis completed" >> "custom_encoded_secure\test_secure.bat"
echo goto end >> "custom_encoded_secure\test_secure.bat"
echo. >> "custom_encoded_secure\test_secure.bat"
echo :view_log >> "custom_encoded_secure\test_secure.bat"
echo echo [LOG] Opening log file: %%LOG_FILE%% >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "[USER] Requested to view log file" >> "custom_encoded_secure\test_secure.bat"
echo if exist "%%LOG_FILE%%" ^( >> "custom_encoded_secure\test_secure.bat"
echo     echo. >> "custom_encoded_secure\test_secure.bat"
echo     echo === LOG FILE CONTENTS === >> "custom_encoded_secure\test_secure.bat"
echo     type "%%LOG_FILE%%" >> "custom_encoded_secure\test_secure.bat"
echo     echo === END OF LOG === >> "custom_encoded_secure\test_secure.bat"
echo     echo. >> "custom_encoded_secure\test_secure.bat"
echo     echo [INFO] Log file location: %%CD%%\%%LOG_FILE%% >> "custom_encoded_secure\test_secure.bat"
echo ^) else ^( >> "custom_encoded_secure\test_secure.bat"
echo     echo [ERROR] Log file not found: %%LOG_FILE%% >> "custom_encoded_secure\test_secure.bat"
echo ^) >> "custom_encoded_secure\test_secure.bat"
echo goto end >> "custom_encoded_secure\test_secure.bat"
echo. >> "custom_encoded_secure\test_secure.bat"
echo :error_exit >> "custom_encoded_secure\test_secure.bat"
echo echo. >> "custom_encoded_secure\test_secure.bat"
echo echo [CRITICAL] Critical error occurred, check log for details. >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "[CRITICAL] Script terminated due to critical error" >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "[END] Test session ended with errors at %%DATE%% %%TIME%%" >> "custom_encoded_secure\test_secure.bat"
echo if defined VIRTUAL_ENV deactivate >> "custom_encoded_secure\test_secure.bat"
echo echo. >> "custom_encoded_secure\test_secure.bat"
echo echo Press any key to exit... >> "custom_encoded_secure\test_secure.bat"
echo pause 1^>nul >> "custom_encoded_secure\test_secure.bat"
echo exit /b 1 >> "custom_encoded_secure\test_secure.bat"
echo. >> "custom_encoded_secure\test_secure.bat"
echo :end >> "custom_encoded_secure\test_secure.bat"
echo call :LOG_MESSAGE "[END] Test session completed normally at %%DATE%% %%TIME%%" >> "custom_encoded_secure\test_secure.bat"
echo. >> "custom_encoded_secure\test_secure.bat"
echo if defined VIRTUAL_ENV ^( >> "custom_encoded_secure\test_secure.bat"
echo     echo [INFO] Deactivating virtual environment... >> "custom_encoded_secure\test_secure.bat"
echo     call :LOG_MESSAGE "[INFO] Deactivating virtual environment" >> "custom_encoded_secure\test_secure.bat"
echo     deactivate >> "custom_encoded_secure\test_secure.bat"
echo ^) >> "custom_encoded_secure\test_secure.bat"
echo. >> "custom_encoded_secure\test_secure.bat"
echo echo. >> "custom_encoded_secure\test_secure.bat"
echo echo [SECURITY] Enhanced test completed. >> "custom_encoded_secure\test_secure.bat"
echo echo [LOG] Complete log saved to: %%LOG_FILE%% >> "custom_encoded_secure\test_secure.bat"
echo echo. >> "custom_encoded_secure\test_secure.bat"
echo echo ======================================== >> "custom_encoded_secure\test_secure.bat"
echo echo  Session Summary >> "custom_encoded_secure\test_secure.bat"
echo echo ======================================== >> "custom_encoded_secure\test_secure.bat"
echo echo  Log file: %%LOG_FILE%% >> "custom_encoded_secure\test_secure.bat"
echo echo  Location: %%CD%% >> "custom_encoded_secure\test_secure.bat"
echo echo  Time: %%DATE%% %%TIME%% >> "custom_encoded_secure\test_secure.bat"
echo echo ======================================== >> "custom_encoded_secure\test_secure.bat"
echo echo. >> "custom_encoded_secure\test_secure.bat"
echo echo Press any key to exit... >> "custom_encoded_secure\test_secure.bat"
echo pause 1^>nul >> "custom_encoded_secure\test_secure.bat"
echo exit /b 0 >> "custom_encoded_secure\test_secure.bat"
echo. >> "custom_encoded_secure\test_secure.bat"
echo REM ======================================== >> "custom_encoded_secure\test_secure.bat"
echo REM LOG MESSAGE FUNCTION >> "custom_encoded_secure\test_secure.bat"
echo REM ======================================== >> "custom_encoded_secure\test_secure.bat"
echo :LOG_MESSAGE >> "custom_encoded_secure\test_secure.bat"
echo echo %%DATE%% %%TIME%% %%~1 ^>^> "%%LOG_FILE%%" >> "custom_encoded_secure\test_secure.bat"
echo goto :EOF >> "custom_encoded_secure\test_secure.bat"

echo [SUCCESS] Advanced secure test launcher created: test_secure.bat

echo.
echo Creating RamanEasyViewer launcher...
echo ========================================

REM Create simple application launcher
echo @echo off > "custom_encoded_secure\RamanEasyViewer.bat"
echo chcp 65001 ^>nul >> "custom_encoded_secure\RamanEasyViewer.bat"
echo title RamanEasyViewer - ãƒ©ãƒžãƒ³ã‚¹ãƒšã‚¯ãƒˆãƒ«åˆ†æžã‚¢ãƒ—ãƒª >> "custom_encoded_secure\RamanEasyViewer.bat"
echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo REM Create debug log >> "custom_encoded_secure\RamanEasyViewer.bat"
echo set DEBUG_LOG=RamanEasyViewer_debug.log >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo [%%DATE%% %%TIME%%] RamanEasyViewerèµ·å‹•é–‹å§‹ ^> "%%DEBUG_LOG%%" >> "custom_encoded_secure\RamanEasyViewer.bat"
echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo ======================================== >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo    RamanEasyViewer >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo    ãƒ©ãƒžãƒ³ã‚¹ãƒšã‚¯ãƒˆãƒ«åˆ†æžã‚¢ãƒ—ãƒªã‚±ãƒ¼ã‚·ãƒ§ãƒ³ >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo ======================================== >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo [DEBUG] ãƒ‡ãƒãƒƒã‚°ãƒ­ã‚°: %%DEBUG_LOG%% >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo cd /d "%%~dp0" >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo [%%DATE%% %%TIME%%] ç¾åœ¨ã®ãƒ‡ã‚£ãƒ¬ã‚¯ãƒˆãƒª: %%CD%% ^>^> "%%DEBUG_LOG%%" >> "custom_encoded_secure\RamanEasyViewer.bat"
echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo ç¾åœ¨ã®ãƒ‡ã‚£ãƒ¬ã‚¯ãƒˆãƒª: %%CD%% >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo REM Check if main_script.py exists >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo [%%DATE%% %%TIME%%] main_script.pyå­˜åœ¨ç¢ºèª ^>^> "%%DEBUG_LOG%%" >> "custom_encoded_secure\RamanEasyViewer.bat"
echo if not exist "main_script.py" ^( >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo [ã‚¨ãƒ©ãƒ¼] main_script.py ãŒè¦‹ã¤ã‹ã‚Šã¾ã›ã‚“ï¼ >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo ã“ã®ãƒãƒƒãƒãƒ•ã‚¡ã‚¤ãƒ«ã¯æš—å·åŒ–ã•ã‚ŒãŸãƒ•ã‚©ãƒ«ãƒ€å†…ã§å®Ÿè¡Œã—ã¦ãã ã•ã„ã€‚ >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo [DEBUG] ç¾åœ¨ã®ãƒ•ã‚©ãƒ«ãƒ€å†…å®¹: >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     dir /b >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo ã‚¨ãƒ©ãƒ¼ãƒ­ã‚°ã‚’ç¢ºèª: %%DEBUG_LOG%% >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo ä½•ã‹ã‚­ãƒ¼ã‚’æŠ¼ã—ã¦çµ‚äº†... >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     pause ^>nul >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     exit /b 1 >> "custom_encoded_secure\RamanEasyViewer.bat"
echo ^) >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo [%%DATE%% %%TIME%%] main_script.pyç™ºè¦‹ ^>^> "%%DEBUG_LOG%%" >> "custom_encoded_secure\RamanEasyViewer.bat"
echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo REM Try to find and activate virtual environment >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo [ç’°å¢ƒ] ä»®æƒ³ç’°å¢ƒã‚’æ¤œç´¢ä¸­... >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo [%%DATE%% %%TIME%%] ä»®æƒ³ç’°å¢ƒæ¤œç´¢é–‹å§‹ ^>^> "%%DEBUG_LOG%%" >> "custom_encoded_secure\RamanEasyViewer.bat"
echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo set VENV_FOUND=0 >> "custom_encoded_secure\RamanEasyViewer.bat"
echo set VENV_PATH= >> "custom_encoded_secure\RamanEasyViewer.bat"
echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo REM Check multiple possible locations >> "custom_encoded_secure\RamanEasyViewer.bat"
echo if exist "env\Scripts\activate.bat" ^( >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     set VENV_PATH=env\Scripts\activate.bat >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     set VENV_FOUND=1 >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo [OK] ä»®æƒ³ç’°å¢ƒãŒè¦‹ã¤ã‹ã‚Šã¾ã—ãŸ: ç¾åœ¨ã®ãƒ‡ã‚£ãƒ¬ã‚¯ãƒˆãƒª >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo [%%DATE%% %%TIME%%] ä»®æƒ³ç’°å¢ƒç™ºè¦‹: ç¾åœ¨ã®ãƒ‡ã‚£ãƒ¬ã‚¯ãƒˆãƒª ^>^> "%%DEBUG_LOG%%" >> "custom_encoded_secure\RamanEasyViewer.bat"
echo ^) else if exist "..\env\Scripts\activate.bat" ^( >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     set VENV_PATH=..\env\Scripts\activate.bat >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     set VENV_FOUND=1 >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo [OK] ä»®æƒ³ç’°å¢ƒãŒè¦‹ã¤ã‹ã‚Šã¾ã—ãŸ: è¦ªãƒ‡ã‚£ãƒ¬ã‚¯ãƒˆãƒª >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo [%%DATE%% %%TIME%%] ä»®æƒ³ç’°å¢ƒç™ºè¦‹: è¦ªãƒ‡ã‚£ãƒ¬ã‚¯ãƒˆãƒª ^>^> "%%DEBUG_LOG%%" >> "custom_encoded_secure\RamanEasyViewer.bat"
echo ^) else if exist "..\..\env\Scripts\activate.bat" ^( >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     set VENV_PATH=..\..\env\Scripts\activate.bat >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     set VENV_FOUND=1 >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo [OK] ä»®æƒ³ç’°å¢ƒãŒè¦‹ã¤ã‹ã‚Šã¾ã—ãŸ: ç¥–çˆ¶æ¯ãƒ‡ã‚£ãƒ¬ã‚¯ãƒˆãƒª >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo [%%DATE%% %%TIME%%] ä»®æƒ³ç’°å¢ƒç™ºè¦‹: ç¥–çˆ¶æ¯ãƒ‡ã‚£ãƒ¬ã‚¯ãƒˆãƒª ^>^> "%%DEBUG_LOG%%" >> "custom_encoded_secure\RamanEasyViewer.bat"
echo ^) else ^( >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo [è­¦å‘Š] ä»®æƒ³ç’°å¢ƒãŒè¦‹ã¤ã‹ã‚Šã¾ã›ã‚“ã€‚ã‚·ã‚¹ãƒ†ãƒ Pythonã‚’ä½¿ç”¨ã—ã¾ã™ã€‚ >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo [%%DATE%% %%TIME%%] ä»®æƒ³ç’°å¢ƒæœªç™ºè¦‹ã€ã‚·ã‚¹ãƒ†ãƒ Pythonä½¿ç”¨ ^>^> "%%DEBUG_LOG%%" >> "custom_encoded_secure\RamanEasyViewer.bat"
echo ^) >> "custom_encoded_secure\RamanEasyViewer.bat"
echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo REM Activate virtual environment if found >> "custom_encoded_secure\RamanEasyViewer.bat"
echo if %%VENV_FOUND%%==1 ^( >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo [ç’°å¢ƒ] ä»®æƒ³ç’°å¢ƒã‚’ã‚¢ã‚¯ãƒ†ã‚£ãƒ™ãƒ¼ãƒˆä¸­... >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo [%%DATE%% %%TIME%%] ä»®æƒ³ç’°å¢ƒã‚¢ã‚¯ãƒ†ã‚£ãƒ™ãƒ¼ãƒˆè©¦è¡Œ: %%VENV_PATH%% ^>^> "%%DEBUG_LOG%%" >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     call "%%VENV_PATH%%" 2^^^>^^^>"%%DEBUG_LOG%%" >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     if defined VIRTUAL_ENV ^( >> "custom_encoded_secure\RamanEasyViewer.bat"
echo         echo [æˆåŠŸ] ä»®æƒ³ç’°å¢ƒãŒã‚¢ã‚¯ãƒ†ã‚£ãƒ™ãƒ¼ãƒˆã•ã‚Œã¾ã—ãŸ >> "custom_encoded_secure\RamanEasyViewer.bat"
echo         echo        ãƒ‘ã‚¹: %%VIRTUAL_ENV%% >> "custom_encoded_secure\RamanEasyViewer.bat"
echo         echo [%%DATE%% %%TIME%%] ä»®æƒ³ç’°å¢ƒã‚¢ã‚¯ãƒ†ã‚£ãƒ™ãƒ¼ãƒˆæˆåŠŸ: %%VIRTUAL_ENV%% ^>^> "%%DEBUG_LOG%%" >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     ^) else ^( >> "custom_encoded_secure\RamanEasyViewer.bat"
echo         echo [è­¦å‘Š] ä»®æƒ³ç’°å¢ƒã®ã‚¢ã‚¯ãƒ†ã‚£ãƒ™ãƒ¼ãƒˆã«å¤±æ•—ã—ã¾ã—ãŸãŒã€ç¶™ç¶šã—ã¾ã™ >> "custom_encoded_secure\RamanEasyViewer.bat"
echo         echo [%%DATE%% %%TIME%%] ä»®æƒ³ç’°å¢ƒã‚¢ã‚¯ãƒ†ã‚£ãƒ™ãƒ¼ãƒˆå¤±æ•— ^>^> "%%DEBUG_LOG%%" >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     ^) >> "custom_encoded_secure\RamanEasyViewer.bat"
echo ^) else ^( >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo [æƒ…å ±] ã‚·ã‚¹ãƒ†ãƒ Pythonã‚’ä½¿ç”¨ã—ã¦ã‚¢ãƒ—ãƒªã‚’èµ·å‹•ã—ã¾ã™ >> "custom_encoded_secure\RamanEasyViewer.bat"
echo ^) >> "custom_encoded_secure\RamanEasyViewer.bat"
echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo REM Test Python availability >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo [Python] Pythonã®ç¢ºèªä¸­... >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo [%%DATE%% %%TIME%%] Pythonç¢ºèªé–‹å§‹ ^>^> "%%DEBUG_LOG%%" >> "custom_encoded_secure\RamanEasyViewer.bat"
echo python --version ^>nul 2^>^&1 >> "custom_encoded_secure\RamanEasyViewer.bat"
echo set PYTHON_EXIT_CODE=%%errorlevel%% >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo [%%DATE%% %%TIME%%] Pythonç¢ºèªçµ‚äº†ã€æˆ»ã‚Šå€¤: %%PYTHON_EXIT_CODE%% ^>^> "%%DEBUG_LOG%%" >> "custom_encoded_secure\RamanEasyViewer.bat"
echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo if %%PYTHON_EXIT_CODE%% neq 0 ^( >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo [ã‚¨ãƒ©ãƒ¼] PythonãŒåˆ©ç”¨ã§ãã¾ã›ã‚“ï¼ >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo [%%DATE%% %%TIME%%] Pythonã‚¨ãƒ©ãƒ¼ ^>^> "%%DEBUG_LOG%%" >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo è§£æ±ºæ–¹æ³•: >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo   1. PythonãŒã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã•ã‚Œã¦ã„ã‚‹ã‹ç¢ºèª >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo   2. ä»®æƒ³ç’°å¢ƒãŒæ­£ã—ãè¨­å®šã•ã‚Œã¦ã„ã‚‹ã‹ç¢ºèª >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo   3. PATHã«PythonãŒå«ã¾ã‚Œã¦ã„ã‚‹ã‹ç¢ºèª >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo [DEBUG] PATHç’°å¢ƒå¤‰æ•°ã®ç¢ºèª: >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo %%PATH%% >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo [DEBUG] where python ã®çµæžœ: >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     where python 2^>^&1 >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo ã‚¨ãƒ©ãƒ¼ãƒ­ã‚°ã‚’ç¢ºèª: %%DEBUG_LOG%% >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo ä½•ã‹ã‚­ãƒ¼ã‚’æŠ¼ã—ã¦çµ‚äº†... >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     pause ^>nul >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     exit /b 1 >> "custom_encoded_secure\RamanEasyViewer.bat"
echo ^) else ^( >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     for /f "tokens=*" %%%%i in ^('python --version 2^^^>^^^&1'^) do ^( >> "custom_encoded_secure\RamanEasyViewer.bat"
echo         echo [OK] %%%%i >> "custom_encoded_secure\RamanEasyViewer.bat"
echo         echo [%%DATE%% %%TIME%%] Pythonç¢ºèªæˆåŠŸ: %%%%i ^>^> "%%DEBUG_LOG%%" >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     ^) >> "custom_encoded_secure\RamanEasyViewer.bat"
echo ^) >> "custom_encoded_secure\RamanEasyViewer.bat"
echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo REM Check if Streamlit is available >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo [Streamlit] Streamlitã®ç¢ºèªä¸­... >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo [%%DATE%% %%TIME%%] Streamlitç¢ºèªé–‹å§‹ ^>^> "%%DEBUG_LOG%%" >> "custom_encoded_secure\RamanEasyViewer.bat"
echo python -c "import streamlit; print(f'Streamlit {streamlit.__version__} åˆ©ç”¨å¯èƒ½')" 2^>"%%DEBUG_LOG%%.tmp" >> "custom_encoded_secure\RamanEasyViewer.bat"
echo set STREAMLIT_EXIT_CODE=%%errorlevel%% >> "custom_encoded_secure\RamanEasyViewer.bat"
echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo if %%STREAMLIT_EXIT_CODE%% neq 0 ^( >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo [ã‚¨ãƒ©ãƒ¼] StreamlitãŒã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«ã•ã‚Œã¦ã„ã¾ã›ã‚“ï¼ >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo [%%DATE%% %%TIME%%] Streamlitã‚¨ãƒ©ãƒ¼ ^>^> "%%DEBUG_LOG%%" >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo Streamlitã‚¨ãƒ©ãƒ¼è©³ç´°: >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     type "%%DEBUG_LOG%%.tmp" 2^>nul >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     del "%%DEBUG_LOG%%.tmp" 2^>nul >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo è§£æ±ºæ–¹æ³•: >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     if %%VENV_FOUND%%==1 ^( >> "custom_encoded_secure\RamanEasyViewer.bat"
echo         echo   ä»®æƒ³ç’°å¢ƒå†…ã§Streamlitã‚’ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«: >> "custom_encoded_secure\RamanEasyViewer.bat"
echo         echo   pip install streamlit >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     ^) else ^( >> "custom_encoded_secure\RamanEasyViewer.bat"
echo         echo   Streamlitã‚’ã‚¤ãƒ³ã‚¹ãƒˆãƒ¼ãƒ«: >> "custom_encoded_secure\RamanEasyViewer.bat"
echo         echo   pip install streamlit >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     ^) >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo ã‚¨ãƒ©ãƒ¼ãƒ­ã‚°ã‚’ç¢ºèª: %%DEBUG_LOG%% >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo ä½•ã‹ã‚­ãƒ¼ã‚’æŠ¼ã—ã¦çµ‚äº†... >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     pause ^>nul >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     exit /b 1 >> "custom_encoded_secure\RamanEasyViewer.bat"
echo ^) else ^( >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     for /f "tokens=*" %%%%i in ^('python -c "import streamlit; print(f'Streamlit {streamlit.__version__} åˆ©ç”¨å¯èƒ½')" 2^^^>^^^&1'^) do ^( >> "custom_encoded_secure\RamanEasyViewer.bat"
echo         echo [OK] %%%%i >> "custom_encoded_secure\RamanEasyViewer.bat"
echo         echo [%%DATE%% %%TIME%%] Streamlitç¢ºèªæˆåŠŸ: %%%%i ^>^> "%%DEBUG_LOG%%" >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     ^) >> "custom_encoded_secure\RamanEasyViewer.bat"
echo ^) >> "custom_encoded_secure\RamanEasyViewer.bat"
echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo del "%%DEBUG_LOG%%.tmp" 2^>nul >> "custom_encoded_secure\RamanEasyViewer.bat"
echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo ======================================== >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo    RamanEasyViewer ã‚’èµ·å‹•ã—ã¦ã„ã¾ã™... >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo ======================================== >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo [æƒ…å ±] ãƒ–ãƒ©ã‚¦ã‚¶ãŒè‡ªå‹•çš„ã«é–‹ãã¾ã™ >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo [ã‚¢ãƒ‰ãƒ¬ã‚¹] http://localhost:8501 >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo [åœæ­¢æ–¹æ³•] Ctrl+C ã‚’æŠ¼ã™ã‹ã€ã“ã®ã‚¦ã‚£ãƒ³ãƒ‰ã‚¦ã‚’é–‰ã˜ã¦ãã ã•ã„ >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo ã‚¢ãƒ—ãƒªã‚±ãƒ¼ã‚·ãƒ§ãƒ³ã‚’èµ·å‹•ä¸­... >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo [%%DATE%% %%TIME%%] Streamlitèµ·å‹•é–‹å§‹ ^>^> "%%DEBUG_LOG%%" >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo REM Launch Streamlit application with error handling >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo [DEBUG] Streamlitã‚³ãƒžãƒ³ãƒ‰å®Ÿè¡Œ... >> "custom_encoded_secure\RamanEasyViewer.bat"
echo streamlit run main_script.py --server.port 8501 --browser.gatherUsageStats false --server.headless false 2^^^>^^^>"%%DEBUG_LOG%%" >> "custom_encoded_secure\RamanEasyViewer.bat"
echo set STREAMLIT_RUN_EXIT=%%errorlevel%% >> "custom_encoded_secure\RamanEasyViewer.bat"
echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo [%%DATE%% %%TIME%%] Streamlitçµ‚äº†ã€æˆ»ã‚Šå€¤: %%STREAMLIT_RUN_EXIT%% ^>^> "%%DEBUG_LOG%%" >> "custom_encoded_secure\RamanEasyViewer.bat"
echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo REM Handle exit >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo ======================================== >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo   RamanEasyViewer ãŒçµ‚äº†ã•ã‚Œã¾ã—ãŸ >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo ======================================== >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo if %%STREAMLIT_RUN_EXIT%% neq 0 ^( >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo [è­¦å‘Š] StreamlitãŒç•°å¸¸çµ‚äº†ã—ã¾ã—ãŸ ^(çµ‚äº†ã‚³ãƒ¼ãƒ‰: %%STREAMLIT_RUN_EXIT%%^) >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo è©³ç´°ã¯ãƒ­ã‚°ãƒ•ã‚¡ã‚¤ãƒ«ã‚’ç¢ºèªã—ã¦ãã ã•ã„: %%DEBUG_LOG%% >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo ^) >> "custom_encoded_secure\RamanEasyViewer.bat"
echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo REM Deactivate virtual environment if it was activated >> "custom_encoded_secure\RamanEasyViewer.bat"
echo if defined VIRTUAL_ENV ^( >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo [ç’°å¢ƒ] ä»®æƒ³ç’°å¢ƒã‚’éžã‚¢ã‚¯ãƒ†ã‚£ãƒ™ãƒ¼ãƒˆä¸­... >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo [%%DATE%% %%TIME%%] ä»®æƒ³ç’°å¢ƒéžã‚¢ã‚¯ãƒ†ã‚£ãƒ™ãƒ¼ãƒˆ ^>^> "%%DEBUG_LOG%%" >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     deactivate >> "custom_encoded_secure\RamanEasyViewer.bat"
echo     echo [å®Œäº†] ä»®æƒ³ç’°å¢ƒãŒéžã‚¢ã‚¯ãƒ†ã‚£ãƒ™ãƒ¼ãƒˆã•ã‚Œã¾ã—ãŸ >> "custom_encoded_secure\RamanEasyViewer.bat"
echo ^) >> "custom_encoded_secure\RamanEasyViewer.bat"
echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo ã‚¢ãƒ—ãƒªã‚±ãƒ¼ã‚·ãƒ§ãƒ³ãŒçµ‚äº†ã—ã¾ã—ãŸã€‚ >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo ãƒ‡ãƒãƒƒã‚°ãƒ­ã‚°: %%DEBUG_LOG%% >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo. >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo ä½•ã‹ã‚­ãƒ¼ã‚’æŠ¼ã—ã¦çµ‚äº†... >> "custom_encoded_secure\RamanEasyViewer.bat"
echo pause ^>nul >> "custom_encoded_secure\RamanEasyViewer.bat"
echo echo [%%DATE%% %%TIME%%] RamanEasyViewerçµ‚äº† ^>^> "%%DEBUG_LOG%%" >> "custom_encoded_secure\RamanEasyViewer.bat"

echo [SUCCESS] RamanEasyViewer.bat created: Simple application launcher

echo.
echo ========================================
echo Security Enhanced Encoding Completed!
echo ========================================
echo.
echo ðŸ›¡ï¸ Output folder: custom_encoded_secure
echo ðŸ”’ Protection method: Multi-layer security
echo     â€¢ PBKDF2 key derivation
echo     â€¢ XOR + Bit manipulation  
echo     â€¢ Custom Base64 alphabet
echo     â€¢ Dynamic obfuscation
echo     â€¢ Anti-analysis measures
echo ðŸ” Security level: Enhanced (Level 2)
echo.
echo ðŸ§ª Test the secure encoded files:
echo    1. cd custom_encoded_secure
echo    2. Run test_secure.bat
echo    3. Select security test options
echo.
echo ðŸ“¦ For secure distribution:
echo    â€¢ Copy entire custom_encoded_secure folder
echo    â€¢ Enhanced protection against reverse engineering
echo    â€¢ Multiple obfuscation layers active
echo    â€¢ Compatible with standard Python 3.x
echo ========================================

deactivate

echo.
echo ðŸš€ Ready to test security enhanced version? (Y/N)
set /p TEST_NOW="Enter choice: "

if /i "%TEST_NOW%"=="Y" (
    cd custom_encoded_secure
    if exist "test_secure.bat" (
        call test_secure.bat
    ) else (
        echo [ERROR] test_secure.bat not found in custom_encoded_secure
        echo Please check if the file was created correctly
        pause
    )
)

pause